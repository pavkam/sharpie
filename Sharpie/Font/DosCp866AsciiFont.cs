/*
Copyright (c) 2022-2025, Alexandru Ciobanu
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace Sharpie.Font;

/// <summary>
///     DOS CodePage 866 font. Uncovered in the depths of Alexandru's prehistoric archives.
///     Original source unknown.
/// </summary>
[PublicAPI]
public sealed class DosCp866AsciiFont: AsciiFont
{
    private static readonly DosCp866AsciiFont _fullWidth = new();

    private const int _bitsPerLine = 8;
    private const int _lines = 8;
    private const int _charsPerByte = 2;

    private const string _raw =


    private static readonly IReadOnlyList<bool[,]> _shapes;

    /// <summary>
    ///     Creates an instance of this font.
    /// </summary>
    internal DosCp866AsciiFont() : base("CP866 Block Characters",
        _lines / 2, _lines / 2, AsciiFontLayout.FullWidth)
    {
    }

    static DosCp866AsciiFont()
    {
        Debug.Assert(_raw.Length % _charsPerByte == 0);
        var byteCount = _raw.Length / _charsPerByte;

        Debug.Assert(byteCount % _lines == 0);
        var glyphCount = byteCount / _lines;

        var glyphs = new List<bool[,]>();
        for (var i = 0; i < glyphCount; i++)
        {
            glyphs.Add(ExtractGlyph(_raw.AsSpan(i * _lines * _charsPerByte, _lines * _charsPerByte)));
        }

        _shapes = glyphs.ToArray();
    }

    private static int Width => _bitsPerLine / 2;

    /// <inheritdoc cref="AsciiFont.HasGlyph" />
    public override bool HasGlyph(Rune @char) => @char.Value >= 0 && @char.Value < _shapes.Count;

    /// <inheritdoc cref="AsciiFont.GetGlyphs(ReadOnlySpan{Rune},Style)" />
    public override IDrawable GetGlyphs(ReadOnlySpan<Rune> chars, Style style)
    {
        if (chars.Length == 0)
        {
            throw new ArgumentException("Chars cannot be empty.", nameof(chars));
        }

        var canvas = new Canvas(new(Width * chars.Length, Height));

        for (var i = 0; i < chars.Length; i++)
        {
            DrawGlyphOntoCanvas(canvas, i * Width, chars[i], style);
        }

        return canvas;
    }

    private void DrawGlyphOntoCanvas(Canvas canvas, int offset, Rune @char, Style style)
    {
        var canvasRect = new Rectangle(new(offset, 0), new(Width, Height));

        canvas.Fill(canvasRect, new Rune(ControlCharacter.Whitespace), style);

        if (!HasGlyph(@char))
        {
            canvas.Box(canvasRect, Canvas.LineStyle.Light, style);
        }
        else
        {
            var shape = _shapes[@char.Value];
            for (var x = 0; x < _bitsPerLine; x++)
            {
                for (var y = 0; y < _lines; y++)
                {
                    var ap = new PointF((x + offset * 2) / 2F, y / 2F);
                    if (shape[x, y])
                    {
                        canvas.Point(ap, style);
                    }
                }
            }
        }
    }

    private static bool[,] ExtractGlyph(ReadOnlySpan<char> str)
    {
        Debug.Assert(str.Length == _lines * _charsPerByte);

        var shape = new bool[8, 8];
        for (var y = 0; y < _lines; y++)
        {
            var pb = byte.Parse(str.Slice(y * _charsPerByte, _charsPerByte), NumberStyles.HexNumber);
            for (var x = 0; x < _bitsPerLine; x++)
            {
                shape[7 - x, y] = (pb & (1 << x)) != 0;
            }
        }

        return shape;
    }

    /// <summary>
    ///     Gets the DOS CodePage 866 font.
    /// </summary>
    public static IAsciiFont FullWidth => _fullWidth;
}
